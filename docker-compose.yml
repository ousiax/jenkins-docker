version: "2.4"
services:
  blueocean:
    container_name: jenkins-blueocean
    build:
      context: ./jenkins
    environment:
      - DOCKER_HOST=tcp://docker:2376
      - DOCKER_CERT_PATH=/certs/client
      - DOCKER_TLS_VERIFY=1
    ports:
      # Maps (i.e. "publishes") port 8080 of the current container to port 8080 on the host machine.
      # The first number represents the port on the host while the last represents the container's port.
      # Therefore, if you specified -p 49000:8080 for this option, you would be accessing Jenkins
      # on your host machine through port 49000.
      - "8080:8080"
      # (Optional) Maps port 50000 of the current container to port 50000 on the host machine.
      # This is only necessary if you have set up one or more inbound Jenkins agents on other machines,
      # which in turn interact with your jenkins-blueocean container (the Jenkins "controller").
      # Inbound Jenkins agents communicate with the Jenkins controller through TCP port 50000 by default.
      # You can change this port number on your Jenkins controller through the Configure Global Security page.
      # If you were to change the TCP port for inbound Jenkins agents of your Jenkins controller to 51000 (for example),
      # then you would need to re-run Jenkins (via this docker run …command) and specify this "publish" option
      # with something like --publish 52000:51000, where the last value matches this changed value on the Jenkins controller
      # and the first value is the port number on the machine hosting the Jenkins controller.
      # Inbound Jenkins agents communicate with the Jenkins controller on that port (52000 in this example).
      # Note that WebSocket agents do not need this configuration.
      - "50000:50000"
    volumes:
      # Maps the /certs/client directory to the previously created jenkins-docker-certs volume.
      # This makes the client TLS certificates needed to connect to the Docker daemon available
      # in the path specified by the DOCKER_CERT_PATH environment variable.
      - type: volume
        source: docker-certs
        target: /certs/client
      # Maps the /var/jenkins_home directory in the container to the Docker volume with the name jenkins-data.
      # Instead of mapping the /var/jenkins_home directory to a Docker volume,
      # you could also map this directory to one on your machine’s local file system.
      # For example, specifying the option --volume $HOME/jenkins:/var/jenkins_home would 
      # map the container's /var/jenkins_home directory to the jenkins subdirectory within
      # the $HOME directory on your local machine, which would typically be /Users/<your-username>/jenkins
      # or /home/<your-username>/jenkins.
      # Note that if you change the source volume or directory for this,
      # the volume from the docker:dind container above needs to be updated to match this.
      - type: volume
        source: data
        target: /var/jenkins_home
    networks:
      jenkins:
  dind:
    container_name: jenkins-docker
    image: docker:dind
    # Running Docker in Docker currently requires privileged access to function properly.
    # This requirement may be relaxed with newer Linux kernel versions.
    privileged: true
    environment:
        # Enables the use of TLS in the Docker server. 
        # Due to the use of a privileged container, this is recommended,
        # though it requires the use of the shared volume described below.
        # This environment variable controls the root directory where Docker TLS certificates are managed.
       - DOCKER_TLS_CERTDIR=/certs
    ports:
      # (Optional) Exposes the Docker daemon port on the host machine.
      # This is useful for executing docker commands on the host machine to control this inner Docker daemon.
      - "2376:2376"
    volumes:
      - type: volume
        source: docker-certs
        target: /certs/client
      - type: volume
        source: data
        target: /var/jenkins_home
    networks:
      jenkins:
        aliases:
          # Makes the Docker in Docker container available as the hostname docker within the jenkins network.
          - docker
volumes:
  docker-certs:
  data:
networks:
  jenkins:
